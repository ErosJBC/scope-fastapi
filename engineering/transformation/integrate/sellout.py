"""
This module contains the class to integrate the sellout dataframe.
"""
import pandas as pd


class SellOutIntegrator:
    """
    A class to assemble the sellout dataframe
    """

    def __init__(self) -> None:
        self.sellin: str = ""

    @staticmethod
    def filter_options(dataframe: pd.DataFrame, options: dict[str, str]) -> pd.DataFrame:
        """
        Filters the sellout dataframe based on the selected options.

        :param dataframe: The dataframe containing sellout data.
        :type dataframe: pd.DataFrame
        :param options: The options selected by the user.
        :type options: dict[str, str]
        :return: A dataframe filtered by the selected options.
        :rtype: pd.DataFrame
        """
        filtered_df = dataframe[
            (dataframe["COD_ZNJE"] == dataframe[dataframe["DES_ZNJE"] == options["nodo"]]["COD_ZNJE"].unique().tolist()[0]) &
            (dataframe["YEAR"] == int(options["year"])) &
            (dataframe["MONTH"].isin([int(i) for i in options["list_month"]]))
        ].reset_index(drop=True).copy()
        return filtered_df

    @staticmethod
    def format_family(dataframe: pd.DataFrame) -> pd.DataFrame:
        """
        Formats the family column in the dataframe.

        :param dataframe: The dataframe to format the family column.
        :type dataframe: pd.DataFrame
        :return: The dataframe with the family column formatted.
        :rtype: pd.DataFrame
        """
        dataframe['FAMILIA'] = dataframe['FAMILIA'].str.split(' ').str[1].str[:3].str.upper()
        return dataframe

    @staticmethod
    def pivot_dataframe(dataframe: pd.DataFrame) -> pd.DataFrame:
        """
        Pivots the sellout dataframe.

        :param dataframe: The dataframe containing sellout data.
        :type dataframe: pd.DataFrame
        :return: A dataframe generated by pivoting the sellout data.
        :rtype: pd.DataFrame
        """
        pivot_df: pd.DataFrame = dataframe.pivot_table(
            index=['COD_ZDES', 'ETAPA', 'FAMILIA', 'COD_PRODUCTO'], # Columns to keep as index
            columns='APLICACION', # Column to pivot
            values='VALOR', # Values to fill the pivot
            aggfunc='sum', # Aggregation function
            fill_value=0 # Fill NaN values with 0
        ).reset_index()
        pivot_df.rename(
            columns={
                'Precio Base': 'Bonif. P.Base',
                'Precio Neto': 'Bonif. P.Neto'
            },
            inplace=True
        )
        return pivot_df

    @staticmethod
    def merge_with_prices_dataframe(sellout_df: pd.DataFrame, prices_df: pd.DataFrame) -> pd.DataFrame:
        """
        Merges the sellout dataframe with the prices dataframe.

        :param sellout_df: The sellout dataframe.
        :type sellout_df: pd.DataFrame
        :param prices_df: The prices dataframe.
        :type prices_df: pd.DataFrame
        :return: A dataframe with the sellout data merged with the prices data.
        :rtype: pd.DataFrame
        """
        merged_df: pd.DataFrame = sellout_df.merge(
            prices_df,
            on=['COD_ZNJE', 'COD_PRODUCTO'],
            how='left'
        )
        return merged_df

    @staticmethod
    def merge_with_pivot_dataframe(sellout_df: pd.DataFrame, pivot_df: pd.DataFrame) -> pd.DataFrame:
        """
        Merges the sellout dataframe with the pivot dataframe.

        :param sellout_df: The sellout dataframe.
        :type sellout_df: pd.DataFrame
        :param pivot_df: The pivot dataframe.
        :type pivot_df: pd.DataFrame
        :return: A dataframe with the sellout data merged with the pivot data.
        :rtype: pd.DataFrame
        """
        merged_df: pd.DataFrame = sellout_df.merge(
            pivot_df,
            on=['COD_ZDES', 'ETAPA', 'FAMILIA', 'COD_PRODUCTO'],
            how='left'
        )
        return merged_df

    @staticmethod
    def add_contribution_column(dataframe: pd.DataFrame) -> pd.DataFrame:
        """
        Adds contribution column to the dataframe

        :param dataframe: The dataframe to add contribution column
        :type dataframe: pd.DataFrame
        :return: The dataframe with contribution column
        :rtype: pd.DataFrame
        """
        for application in list(dataframe.columns)[4:]:
            dataframe[f'APORTE {application}'] = dataframe['PVP'] * dataframe['CTD_SACOS'] * dataframe[application] * (
                1 if application == 'Bonif. P.Base' else dataframe['Dto. Factura']
            )
        return dataframe